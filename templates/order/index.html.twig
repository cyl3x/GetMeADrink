{% extends 'base.html.twig' %}

{% block title %}
{{ parent() }} - Order
{% endblock %}

{% block stylesheets %}
{{parent()}}
<style>
    .button-container{
        position: relative;
        display: inline-block;
    }

    .overlay {
        position: absolute;
        top: 0;
        right: 1rem;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.3s ease;
    }

    .button-container.active .overlay {
        opacity: 1;
        pointer-events: auto;
    }

    .overlay .side {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 3rem;
        font-weight: bold;
        cursor: pointer;
    }

    .overlay .minus {
        color: black;
        background-color: rgba(255, 0, 0, 0.25);
        display: flex;
        flex:1;
        height: 10rem;
        width: 5rem;
        line-height: 10rem;
        font-family: monospace;
    }

    .overlay .plus {
        color: black;
        background-color: rgba(0, 255, 0, 0.25);
        display: flex;
        flex:1;
        height: 10rem;
        width: 5rem;
        line-height:10rem;
        font-family: monospace
    }

    .divider {
        width: 2px;
        height: 10rem;
        background-color: black;
        display:flex;
        flex:auto
    }

    .divider-horizontal {
        width: 100%;
        height: 2px;
        background-color: black;
        display:flex;
        flex-direction: row;
        flex:auto;
    }

    .no-select{
        user-select: none
    }
</style>
{% endblock %}

{% block body %}
<div class="d-flex vh-100">
    {{ component('OrderDetails', { order: order }) }}
    {{ component('Products', { order: order }) }}
</div>
{% endblock %}

{% block javascripts %}
{{parent()}}
<script>
    document.addEventListener("DOMContentLoaded", function() {
        const timers = new Map();

        function startOrResetTimer(container) {
            const productId = container.getAttribute("data-id");

            if (timers.has(productId)) {
                clearTimeout(timers.get(productId));
            }

            container.classList.add("active")

            const timer = setTimeout(() => {
                container.classList.remove("active");
                timers.delete(productId);
            }, 2500);

            timers.set(productId, timer);
        }

        document.querySelectorAll(".button-container").forEach(function(button) {
            button.addEventListener("click", function() {
                startOrResetTimer(button)
            });
        });
    });
</script>
{% endblock %}
